file: /Users/qingwang/learning/python/jewelry_store/app/routes/user.py
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from app.data import users
from app.models import User

router = APIRouter()

class UserRegistrationData(BaseModel):
    username: str
    password: str
    email: str
    address: str

class UserLoginData(BaseModel):
    username: str
    password: str

@router.post("/users/register")
async def register_user(user_data: UserRegistrationData):
    for user in users:
        if user.username == user_data.username:
            raise HTTPException(status_code=400, detail="Username already exists")
    new_user = User(user_data.username, user_data.password, user_data.email, user_data.address)
    users.append(new_user)
    return {"message": "User registered successfully"}

@router.post("/users/login")
async def login(user_data: UserLoginData):
    username = user_data.username
    password = user_data.password
    for user in users:
        if user.username == username and user.password == password:
            return {"access_token": "dummy_token", "token_type": "bearer"}
    raise HTTPException(status_code=401, detail="Invalid username or password")

file: /Users/qingwang/learning/python/jewelry_store/app/routes/order.py
from fastapi import APIRouter, HTTPException
from app.data import orders, users, products
from app.models import Order
from datetime import datetime

router = APIRouter()

@router.post("/")
async def create_order(username: str, product_ids: list[int], quantities: list[int]):
    user = next((user for user in users if user.username == username), None)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    if len(product_ids) != len(quantities):
        raise HTTPException(status_code=400, detail="Product IDs and quantities must match in length")
    
    order_id = len(orders) + 1
    order_date = datetime.now().isoformat()
    new_order = Order(order_id, user.username, product_ids, quantities, order_date)
    orders.append(new_order)
    return {"message": "Order created successfully", "order_id": order_id}


file: /Users/qingwang/learning/python/jewelry_store/app/routes/__init__.py


file: /Users/qingwang/learning/python/jewelry_store/app/routes/product.py
from fastapi import APIRouter
from app.data import products  # Assuming products is correctly imported and initialized in data.py
from app.models import Product  # Import the Product class

router = APIRouter()

@router.get("/")
async def list_products():
    return [product.__dict__ for product in products]

@router.get("/search")
async def search_products(query: str):
    result = [product.__dict__ for product in products if query.lower() in product.name.lower() or query.lower() in product.description.lower()]
    return result


