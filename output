file: /Users/qingwang/learning/python/jewelry_store/app/routes/user.py
# app/routes/user.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.models import User as DBUser
from app.schemas import User
from app.database import get_db  # Import the get_db dependency

router = APIRouter()

@router.post("/register", response_model=User)
def register_user(user: User, db: Session = Depends(get_db)):
    db_user = DBUser(username=user.username, password=user.password, email=user.email, address=user.address)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return user

@router.post("/login")
def login(user_data: User, db: Session = Depends(get_db)):
    db_user = db.query(DBUser).filter(DBUser.username == user_data.username, DBUser.password == user_data.password).first()
    if db_user is None:
        raise HTTPException(status_code=401, detail="Invalid username or password")
    return {"access_token": "dummy_token", "token_type": "bearer"}

file: /Users/qingwang/learning/python/jewelry_store/app/routes/order.py
# app/routes/order.py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from datetime import datetime
from app.models import Order as DBOrder, Product as DBProduct
from app.schemas import Order
from app.database import get_db  # Import the get_db dependency

router = APIRouter()

@router.post("/", response_model=Order)
def create_order(order: Order, db: Session = Depends(get_db)):
    db_order = DBOrder(user_id=order.user_id, order_date=datetime.utcnow())
    for product in order.products:
        db_product = DBProduct(**product.dict())
        db.add(db_product)
        db_order.products.append(db_product)
    db.add(db_order)
    db.commit()
    db.refresh(db_order)
    return order

file: /Users/qingwang/learning/python/jewelry_store/app/routes/__init__.py


file: /Users/qingwang/learning/python/jewelry_store/app/routes/product.py
# app/routes/product.py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from typing import List
from app.models import Product as DBProduct
from app.schemas import Product
from app.database import get_db  # Import the get_db dependency

router = APIRouter()

@router.get("/", response_model=List[Product])
def list_products(db: Session = Depends(get_db)):
    products = db.query(DBProduct).all()
    return products

@router.get("/search")
def search_products(query: str, db: Session = Depends(get_db)):
    products = db.query(DBProduct).filter(DBProduct.name.ilike(f"%{query}%") | DBProduct.description.ilike(f"%{query}%")).all()
    return products

@router.post("/", response_model=Product)
def create_product(product: Product, db: Session = Depends(get_db)):
    db_product = DBProduct(name=product.name, description=product.description, price=product.price,
                         quantity=product.quantity, image_url=product.image_url)
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return product

